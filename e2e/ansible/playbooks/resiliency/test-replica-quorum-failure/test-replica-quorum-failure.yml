# test-single-replica-failure.yml
# Author: UdayKiran
# Description: Replica failure test(Quorun met).

###############################################################################################
#Test Steps:
#1. Copy Test artifacts to Kubemaster.
#2. Deploy Percona application with liveness probe running db queries continuously.
#3. Setup ChaosKube infrastructure.
#4. Gather Node,Replica Container and Pumba netem details required for test.
#5. Initiate single replica failure using ChaosKube.
#6. Check percona application status to veriy openebs controller can sustain failures.
#7. Perform cleanup of test artifacts.
###############################################################################################

- hosts: localhost

  vars_files:
    - test-replica-quorum-failure-vars.yml

  tasks:
   - block:

       - include: test-replica-quorum-failure-prereq.yml

       ###################################################
       #                PREPARE FOR TEST                 #
       # (Place artifacts in kubemaster, start logger &  #
       # confirm OpenEBS operator is ready for requests. #
       ###################################################

       - name: Get percona spec and liveness scripts
         get_url:
           url: "{{ item }}"
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
         with_items: "{{ percona_links }}"

       - name: Replace volume-claim name with test parameters
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/regex_task.yml"
         vars:
           path: "{{ result_kube_home.stdout }}/percona.yaml"
           regex1: "{{replace_item}}"
           regex2: "{{replace_with}}"

       - name: Copy the fault injection specs to kubemaster
         copy:
           src: "{{ fault_injection_file }}"
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Copy the storage class specs to kubemaster
         copy:
           src: "{{ storage_class_file }}"
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Check status of maya-api server
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_check.yml"
         vars:
            ns: openebs
            app: maya-api

       ####################################################
       #          SETUP FAULT-INJECTION ENV               #
       # (Setup chaoskube deployment with an empty policy,#
       # deploy percona w/ a liveness check for DB writes)#
       ####################################################

       - name: Create test specific namespace
         command: kubectl create ns {{ namespace }}
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Setup the storage class
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_task.yml"
         vars:
           app_yml: "{{ storage_class_file }}"
           ns: default

       - name: Create a configmap with the liveness sql script
         shell: source ~/.profile; kubectl create configmap sqltest --from-file={{ percona_files.1 }} -n {{ namespace }}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         failed_when: "'configmap' and 'created' not in result.stdout"

       - name: Create percona deployment with OpenEBS storage
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_task.yml"
         vars:
           app_yml: "{{ percona_files.0 }}"
           ns: "{{ namespace }}"

       - name: Wait for 120s to ensure liveness check starts
         wait_for:
           timeout: 120

       - name: Check whether percona application is running
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_check.yml"
         vars:
            ns: "{{ namespace }}"
            app: percona

       - name: Get the name of the volume replica deployment
         shell: >
           source ~/.profile; kubectl get deployments -n {{ namespace }}
           -l openebs/replica=jiva-replica --no-headers
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result_deploy

       - name: Set the replica deployment name to variable
         set_fact:
           replica_deploy: "{{ result_deploy.stdout_lines[0].split()[0] }}"

       ########################################################
       #        INJECT FAULTS FOR SPECIFIED PERIOD            #
       # (Obtain begin marker before fault-inject(FI),do ctrl #
       # failures, verify successful FI via end marker)       #
       ########################################################

       - name: Populate the iterator with the values to loop
         shell: >
           shuf -i 1-100 -n {{interval}}
         args:
           executable: /bin/bash
         register: iterator

       - include: inject_replica_quorum_failure.yml
         with_items: "{{ iterator.stdout_lines }}"

       ########################################################
       #        VERIFY RESILINCY/FAULT-TOLERATION             #
       # (Confirm liveness checks on percona are successful & #
       # pod is still in running state)                       #
       ########################################################

       - name: Confirm percona pod is still running
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_check.yml"
         vars:
            ns: "{{ namespace }}"
            app: percona

       ########################################################
       #                        CLEANUP                       #
       # (Tear down application, liveness configmap as well as#
       # the FI (chaoskube) infrastructure. Also stop logger) #
       ########################################################

       - name: Test Passed
         set_fact:
           flag: "Test Passed"

     rescue:
       - name: Test Failed
         set_fact:
           flag: "Test Failed"

     always:
       - block:

           - include: test-replica-quorum-failure-cleanup.yml

           - name: Test Cleanup Passed
             set_fact:
               cflag: "Cleanup Passed"

         rescue:
           - name: Test Cleanup Failed
             set_fact:
               cflag: "Cleanup Failed"

         always:

           - name: 5) Terminate the log aggregator
             shell: source ~/.profile; killall stern
             args:
               executable: /bin/bash
             delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

           - name: Send slack notification
             slack:
               token: "{{ lookup('env','SLACK_TOKEN') }}"
               msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }},{{ cflag }}'
             when: slack_notify | bool and lookup('env','SLACK_TOKEN')


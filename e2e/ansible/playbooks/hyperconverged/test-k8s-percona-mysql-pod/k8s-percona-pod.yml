# k8s-percona-pod.yml
# Description: Deploy percona application using OpenEBS volume.

###############################################################################################
#Test Steps:
#1. Install the prerequisites ans dependencies
#2. Download the test artifacts to k8s master.
#3. Check whether the OpenEBS components are deployed.
#4. Deploy Percona application.
#5. Check if the application pod is up and running
#6. Check if the Percona service us up.
#7. Copy files to the K8s node.
#8. Pull mysql client image and generate load
#9. Perform cleanup of test artifacts.
###############################################################################################

- hosts: localhost

  vars_files:
    - k8s-percona-pod-vars.yml

  tasks:
   - block:

       - name: 1) Install the prerequisites
         include: k8s-percona-pod-prerequisites.yml

       - name: 2) Download YAML for percona mysql plugin
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/get_url.yml"
         vars:
           url: "{{ percona_mysql_plugin_link }}"
           dest: "{{ result_kube_home.stdout }}/{{ pod_yaml_alias }}"
           delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 3) Check whether maya-apiserver pod is deployed
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_check.yml"
         vars:
            ns: openebs
            app: maya-api

       - name: 3a) Replace volume-claim name with test parameters
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/regex_task.yml"
         vars:
           path: "{{ result_kube_home.stdout }}/{{ pod_yaml_alias }}"
           regex1: "{{replace_item}}"
           regex2: "{{replace_with}}"

       - name: 3b) Replace volume size in plugin YAML
         lineinfile:
           path: "{{ result_kube_home.stdout }}/{{ pod_yaml_alias }}"
           regexp: "storage:"
           line: "      storage: \"{{percona_mysql_vol_size}}\""
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 4) Create test specific namespace
         command: kubectl create ns {{ namespace }}
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 4a) Deploy percona applcation
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_task.yml"
         vars:
           app_yml: "{{ pod_yaml_alias }}"
           ns: "{{ namespace }}"

       - name: 5) Check application status
         include_tasks: "{{ansible_env.HOME}}/{{utils_path}}/deploy_check.yml"
         vars:
            ns: "{{ namespace }}"
            app: percona

       - name: 6) Get $HOME of K8s minion for kubernetes user
         shell: source ~/.profile; echo $HOME
         args:
           executable: /bin/bash
         register: result_kube_home
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"

       - name: 6a) Get IP address of percona mysql pod
         shell: source ~/.profile; kubectl describe pod percona -n {{ namespace }}
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result_IP

       - name: 6b) Set IP of Pod to variable
         set_fact:
           pod_ip: "{{ result_IP.stdout_lines[7].split()[1] }}"

       - name: 7) Copy files into kube minion
         copy:
           src: "{{ item }}"
           dest: "{{ result_kube_home.stdout }}"
         with_items: "{{ files }}"
         delegate_to: "{{ groups['kubernetes-kubeminions'].0 }}"

       - name: 8) Pull the mysql-client image
         docker_image:
           name: openebs/tests-mysql-client
           state: present
           timeout: 120
         become: true
         delegate_to: "{{ groups['kubernetes-kubeminions'].0 }}"

       - name: 8a) mysql-client docker instantiate
         docker_container:
           name: client
           image: openebs/tests-mysql-client
           network_mode: host
           command: timelimit -t {{ mysql_load_duration }} sh MySQLLoadGenerate.sh {{ pod_ip }} > /dev/null 2>&1
           state: started
         become: true
         delegate_to: "{{ groups['kubernetes-kubeminions'].0 }}"

       - name: Test Passed
         set_fact:
           flag: "Test Passed"

     rescue:
       - name: Test Failed
         set_fact:
           flag: "Test Failed"

     always:
       - block:

           - include: k8s-percona-pod-cleanup.yml

           - name: Test Cleanup Passed
             set_fact:
               cflag: "Cleanup Passed"

         rescue:
           - name: Test Cleanup Failed
             set_fact:
               cflag: "Cleanup Failed"

         always:

           - name: 7) Terminate the log aggregator
             shell: source ~/.profile; killall stern
             args:
               executable: /bin/bash
             delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

           - name: Send slack notification
             slack:
               token: "{{ lookup('env','SLACK_TOKEN') }}"
               msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }},{{ cflag }}'

